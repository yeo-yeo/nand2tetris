@256
D=A
@SP
M=D
// C_CALL Sys.init 0
@return-1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(return-1)
// C_FUNCTION Ball.new 0
(Ball.new)
// C_PUSH constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Memory.alloc 1
@return-2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(return-2)
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1
@THIS
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH argument 2
@ARG
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 10
@THIS
D=M
@10
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH argument 3
@ARG
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 11
@THIS
D=M
@11
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH argument 4
@ARG
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 12
@THIS
D=M
@12
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH argument 5
@ARG
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 13
@THIS
D=M
@13
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 14
@THIS
D=M
@14
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.show 1
@return-3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.show
0;JMP
(return-3)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Ball.dispose 0
(Ball.dispose)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Memory.deAlloc 1
@return-4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(return-4)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Ball.show 0
(Ball.show)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_CALL Screen.setColor 1
@return-5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(return-5)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.draw 1
@return-6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.draw
0;JMP
(return-6)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Ball.hide 0
(Ball.hide)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Screen.setColor 1
@return-7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(return-7)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.draw 1
@return-8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.draw
0;JMP
(return-8)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Ball.draw 0
(Ball.draw)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_CALL Screen.drawRectangle 4
@return-9
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(return-9)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Ball.getLeft 0
(Ball.getLeft)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Ball.getRight 0
(Ball.getRight)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Ball.setDestination 3
(Ball.setDestination)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 2
@THIS
D=M
@2
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH argument 2
@ARG
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 3
@THIS
D=M
@3
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.abs 1
@return-10
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(return-10)
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.abs 1
@return-11
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(return-11)
// C_POP local 1
@LCL
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-1
D;JLT
@SP
A=M-1
M=0
@CONTINUE-2
0;JMP
(SET_TRUE-1)
@SP
A=M-1
M=-1
(CONTINUE-2)
// C_POP this 7
@THIS
D=M
@7
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 7
@THIS
D=M
@7
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_IF IF_TRUE0
@SP
M=M-1
A=M
D=M
@IF_TRUE0
D;JNE
// C_GOTO IF_FALSE0
@IF_FALSE0
0;JMP
// C_LABEL IF_TRUE0
(IF_TRUE0)
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2
@LCL
D=M
@2
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2
@ARG
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-3
D;JLT
@SP
A=M-1
M=0
@CONTINUE-4
0;JMP
(SET_TRUE-3)
@SP
A=M-1
M=-1
(CONTINUE-4)
// C_POP this 8
@THIS
D=M
@8
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-5
D;JLT
@SP
A=M-1
M=0
@CONTINUE-6
0;JMP
(SET_TRUE-5)
@SP
A=M-1
M=-1
(CONTINUE-6)
// C_POP this 9
@THIS
D=M
@9
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END0
@IF_END0
0;JMP
// C_LABEL IF_FALSE0
(IF_FALSE0)
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-7
D;JLT
@SP
A=M-1
M=0
@CONTINUE-8
0;JMP
(SET_TRUE-7)
@SP
A=M-1
M=-1
(CONTINUE-8)
// C_POP this 8
@THIS
D=M
@8
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2
@ARG
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-9
D;JLT
@SP
A=M-1
M=0
@CONTINUE-10
0;JMP
(SET_TRUE-9)
@SP
A=M-1
M=-1
(CONTINUE-10)
// C_POP this 9
@THIS
D=M
@9
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_END0
(IF_END0)
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.multiply 2
@return-12
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(return-12)
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 4
@THIS
D=M
@4
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.multiply 2
@return-13
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(return-13)
// C_POP this 5
@THIS
D=M
@5
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_CALL Math.multiply 2
@return-14
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(return-14)
// C_POP this 6
@THIS
D=M
@6
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Ball.move 0
(Ball.move)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.hide 1
@return-15
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.hide
0;JMP
(return-15)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH this 4
@THIS
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-11
D;JLT
@SP
A=M-1
M=0
@CONTINUE-12
0;JMP
(SET_TRUE-11)
@SP
A=M-1
M=-1
(CONTINUE-12)
// C_IF IF_TRUE0
@SP
M=M-1
A=M
D=M
@IF_TRUE0
D;JNE
// C_GOTO IF_FALSE0
@IF_FALSE0
0;JMP
// C_LABEL IF_TRUE0
(IF_TRUE0)
// C_PUSH this 4
@THIS
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 5
@THIS
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP this 4
@THIS
D=M
@4
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END0
@IF_END0
0;JMP
// C_LABEL IF_FALSE0
(IF_FALSE0)
// C_PUSH this 4
@THIS
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 6
@THIS
D=M
@6
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP this 4
@THIS
D=M
@4
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 9
@THIS
D=M
@9
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_IF IF_TRUE1
@SP
M=M-1
A=M
D=M
@IF_TRUE1
D;JNE
// C_GOTO IF_FALSE1
@IF_FALSE1
0;JMP
// C_LABEL IF_TRUE1
(IF_TRUE1)
// C_PUSH this 7
@THIS
D=M
@7
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_IF IF_TRUE2
@SP
M=M-1
A=M
D=M
@IF_TRUE2
D;JNE
// C_GOTO IF_FALSE2
@IF_FALSE2
0;JMP
// C_LABEL IF_TRUE2
(IF_TRUE2)
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END2
@IF_END2
0;JMP
// C_LABEL IF_FALSE2
(IF_FALSE2)
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP this 1
@THIS
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_END2
(IF_END2)
// C_GOTO IF_END1
@IF_END1
0;JMP
// C_LABEL IF_FALSE1
(IF_FALSE1)
// C_PUSH this 7
@THIS
D=M
@7
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_IF IF_TRUE3
@SP
M=M-1
A=M
D=M
@IF_TRUE3
D;JNE
// C_GOTO IF_FALSE3
@IF_FALSE3
0;JMP
// C_LABEL IF_TRUE3
(IF_TRUE3)
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END3
@IF_END3
0;JMP
// C_LABEL IF_FALSE3
(IF_FALSE3)
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 1
@THIS
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_END3
(IF_END3)
// C_LABEL IF_END1
(IF_END1)
// C_LABEL IF_END0
(IF_END0)
// C_PUSH this 8
@THIS
D=M
@8
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_IF IF_TRUE4
@SP
M=M-1
A=M
D=M
@IF_TRUE4
D;JNE
// C_GOTO IF_FALSE4
@IF_FALSE4
0;JMP
// C_LABEL IF_TRUE4
(IF_TRUE4)
// C_PUSH this 7
@THIS
D=M
@7
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_IF IF_TRUE5
@SP
M=M-1
A=M
D=M
@IF_TRUE5
D;JNE
// C_GOTO IF_FALSE5
@IF_FALSE5
0;JMP
// C_LABEL IF_TRUE5
(IF_TRUE5)
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP this 1
@THIS
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END5
@IF_END5
0;JMP
// C_LABEL IF_FALSE5
(IF_FALSE5)
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_END5
(IF_END5)
// C_GOTO IF_END4
@IF_END4
0;JMP
// C_LABEL IF_FALSE4
(IF_FALSE4)
// C_PUSH this 7
@THIS
D=M
@7
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_IF IF_TRUE6
@SP
M=M-1
A=M
D=M
@IF_TRUE6
D;JNE
// C_GOTO IF_FALSE6
@IF_FALSE6
0;JMP
// C_LABEL IF_TRUE6
(IF_TRUE6)
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 1
@THIS
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END6
@IF_END6
0;JMP
// C_LABEL IF_FALSE6
(IF_FALSE6)
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_END6
(IF_END6)
// C_LABEL IF_END4
(IF_END4)
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 10
@THIS
D=M
@10
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-13
D;JGT
@SP
A=M-1
M=0
@CONTINUE-14
0;JMP
(SET_TRUE-13)
@SP
A=M-1
M=-1
(CONTINUE-14)
// not
@SP
A=M-1
M=!M
// C_IF IF_TRUE7
@SP
M=M-1
A=M
D=M
@IF_TRUE7
D;JNE
// C_GOTO IF_FALSE7
@IF_FALSE7
0;JMP
// C_LABEL IF_TRUE7
(IF_TRUE7)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 14
@THIS
D=M
@14
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 10
@THIS
D=M
@10
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_FALSE7
(IF_FALSE7)
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 11
@THIS
D=M
@11
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-15
D;JLT
@SP
A=M-1
M=0
@CONTINUE-16
0;JMP
(SET_TRUE-15)
@SP
A=M-1
M=-1
(CONTINUE-16)
// not
@SP
A=M-1
M=!M
// C_IF IF_TRUE8
@SP
M=M-1
A=M
D=M
@IF_TRUE8
D;JNE
// C_GOTO IF_FALSE8
@IF_FALSE8
0;JMP
// C_LABEL IF_TRUE8
(IF_TRUE8)
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 14
@THIS
D=M
@14
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 11
@THIS
D=M
@11
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_FALSE8
(IF_FALSE8)
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 12
@THIS
D=M
@12
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-17
D;JGT
@SP
A=M-1
M=0
@CONTINUE-18
0;JMP
(SET_TRUE-17)
@SP
A=M-1
M=-1
(CONTINUE-18)
// not
@SP
A=M-1
M=!M
// C_IF IF_TRUE9
@SP
M=M-1
A=M
D=M
@IF_TRUE9
D;JNE
// C_GOTO IF_FALSE9
@IF_FALSE9
0;JMP
// C_LABEL IF_TRUE9
(IF_TRUE9)
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 14
@THIS
D=M
@14
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 12
@THIS
D=M
@12
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1
@THIS
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_FALSE9
(IF_FALSE9)
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 13
@THIS
D=M
@13
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-19
D;JLT
@SP
A=M-1
M=0
@CONTINUE-20
0;JMP
(SET_TRUE-19)
@SP
A=M-1
M=-1
(CONTINUE-20)
// not
@SP
A=M-1
M=!M
// C_IF IF_TRUE10
@SP
M=M-1
A=M
D=M
@IF_TRUE10
D;JNE
// C_GOTO IF_FALSE10
@IF_FALSE10
0;JMP
// C_LABEL IF_TRUE10
(IF_TRUE10)
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 14
@THIS
D=M
@14
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 13
@THIS
D=M
@13
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1
@THIS
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_FALSE10
(IF_FALSE10)
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.show 1
@return-16
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.show
0;JMP
(return-16)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH this 14
@THIS
D=M
@14
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Ball.bounce 5
(Ball.bounce)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.divide 2
@return-17
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(return-17)
// C_POP local 2
@LCL
D=M
@2
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.divide 2
@return-18
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(return-18)
// C_POP local 3
@LCL
D=M
@3
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-21
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-22
0;JMP
(SET_TRUE-21)
@SP
A=M-1
M=-1
(CONTINUE-22)
// C_IF IF_TRUE0
@SP
M=M-1
A=M
D=M
@IF_TRUE0
D;JNE
// C_GOTO IF_FALSE0
@IF_FALSE0
0;JMP
// C_LABEL IF_TRUE0
(IF_TRUE0)
// C_PUSH constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4
@LCL
D=M
@4
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END0
@IF_END0
0;JMP
// C_LABEL IF_FALSE0
(IF_FALSE0)
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-23
D;JLT
@SP
A=M-1
M=0
@CONTINUE-24
0;JMP
(SET_TRUE-23)
@SP
A=M-1
M=-1
(CONTINUE-24)
// not
@SP
A=M-1
M=!M
// C_PUSH argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-25
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-26
0;JMP
(SET_TRUE-25)
@SP
A=M-1
M=-1
(CONTINUE-26)
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-27
D;JLT
@SP
A=M-1
M=0
@CONTINUE-28
0;JMP
(SET_TRUE-27)
@SP
A=M-1
M=-1
(CONTINUE-28)
// C_PUSH argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-29
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-30
0;JMP
(SET_TRUE-29)
@SP
A=M-1
M=-1
(CONTINUE-30)
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// or
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D|M
// C_IF IF_TRUE1
@SP
M=M-1
A=M
D=M
@IF_TRUE1
D;JNE
// C_GOTO IF_FALSE1
@IF_FALSE1
0;JMP
// C_LABEL IF_TRUE1
(IF_TRUE1)
// C_PUSH constant 20
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4
@LCL
D=M
@4
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END1
@IF_END1
0;JMP
// C_LABEL IF_FALSE1
(IF_FALSE1)
// C_PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4
@LCL
D=M
@4
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_END1
(IF_END1)
// C_LABEL IF_END0
(IF_END0)
// C_PUSH this 14
@THIS
D=M
@14
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-31
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-32
0;JMP
(SET_TRUE-31)
@SP
A=M-1
M=-1
(CONTINUE-32)
// C_IF IF_TRUE2
@SP
M=M-1
A=M
D=M
@IF_TRUE2
D;JNE
// C_GOTO IF_FALSE2
@IF_FALSE2
0;JMP
// C_LABEL IF_TRUE2
(IF_TRUE2)
// C_PUSH constant 506
@506
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_CALL Math.multiply 2
@return-19
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(return-19)
// C_PUSH local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.divide 2
@return-20
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(return-20)
// C_POP local 1
@LCL
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.multiply 2
@return-21
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(return-21)
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP local 1
@LCL
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END2
@IF_END2
0;JMP
// C_LABEL IF_FALSE2
(IF_FALSE2)
// C_PUSH this 14
@THIS
D=M
@14
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-33
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-34
0;JMP
(SET_TRUE-33)
@SP
A=M-1
M=-1
(CONTINUE-34)
// C_IF IF_TRUE3
@SP
M=M-1
A=M
D=M
@IF_TRUE3
D;JNE
// C_GOTO IF_FALSE3
@IF_FALSE3
0;JMP
// C_LABEL IF_TRUE3
(IF_TRUE3)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.multiply 2
@return-22
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(return-22)
// C_PUSH local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.divide 2
@return-23
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(return-23)
// C_POP local 1
@LCL
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.multiply 2
@return-24
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(return-24)
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP local 1
@LCL
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END3
@IF_END3
0;JMP
// C_LABEL IF_FALSE3
(IF_FALSE3)
// C_PUSH this 14
@THIS
D=M
@14
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-35
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-36
0;JMP
(SET_TRUE-35)
@SP
A=M-1
M=-1
(CONTINUE-36)
// C_IF IF_TRUE4
@SP
M=M-1
A=M
D=M
@IF_TRUE4
D;JNE
// C_GOTO IF_FALSE4
@IF_FALSE4
0;JMP
// C_LABEL IF_TRUE4
(IF_TRUE4)
// C_PUSH constant 250
@250
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 25
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_CALL Math.multiply 2
@return-25
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(return-25)
// C_PUSH local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.divide 2
@return-26
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(return-26)
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.multiply 2
@return-27
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(return-27)
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END4
@IF_END4
0;JMP
// C_LABEL IF_FALSE4
(IF_FALSE4)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 25
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.multiply 2
@return-28
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(return-28)
// C_PUSH local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.divide 2
@return-29
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(return-29)
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Math.multiply 2
@return-30
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(return-30)
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_END4
(IF_END4)
// C_LABEL IF_END3
(IF_END3)
// C_LABEL IF_END2
(IF_END2)
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.setDestination 3
@return-31
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.setDestination
0;JMP
(return-31)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION PongGame.new 0
(PongGame.new)
// C_PUSH constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Memory.alloc 1
@return-32
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(return-32)
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_CALL Screen.clearScreen 0
@return-33
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.clearScreen
0;JMP
(return-33)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 6
@THIS
D=M
@6
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 230
@230
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 229
@229
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 6
@THIS
D=M
@6
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.new 4
@return-34
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.new
0;JMP
(return-34)
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 253
@253
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 222
@222
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 229
@229
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.new 6
@return-35
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@11
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.new
0;JMP
(return-35)
// C_POP this 1
@THIS
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 400
@400
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.setDestination 3
@return-36
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.setDestination
0;JMP
(return-36)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 238
@238
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 240
@240
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Screen.drawRectangle 4
@return-37
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(return-37)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 22
@22
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Output.moveCursor 2
@return-38
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(return-38)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.new 1
@return-39
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(return-39)
// C_PUSH constant 83
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-40
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-40)
// C_PUSH constant 99
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-41
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-41)
// C_PUSH constant 111
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-42
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-42)
// C_PUSH constant 114
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-43
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-43)
// C_PUSH constant 101
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-44
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-44)
// C_PUSH constant 58
@58
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-45
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-45)
// C_PUSH constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-46
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-46)
// C_PUSH constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-47
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-47)
// C_CALL Output.printString 1
@return-48
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(return-48)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 3
@THIS
D=M
@3
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 4
@THIS
D=M
@4
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2
@THIS
D=M
@2
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 5
@THIS
D=M
@5
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION PongGame.dispose 0
(PongGame.dispose)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.dispose 1
@return-49
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.dispose
0;JMP
(return-49)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.dispose 1
@return-50
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.dispose
0;JMP
(return-50)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Memory.deAlloc 1
@return-51
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(return-51)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION PongGame.newInstance 0
(PongGame.newInstance)
// C_CALL PongGame.new 0
@return-52
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.new
0;JMP
(return-52)
// C_POP static 0
@SP
M=M-1
A=M
D=M
@PongGame.0
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION PongGame.getInstance 0
(PongGame.getInstance)
// C_PUSH static 0
@PongGame.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION PongGame.run 1
(PongGame.run)
@SP
A=M
M=0
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_LABEL WHILE_EXP0
(WHILE_EXP0)
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// C_IF WHILE_END0
@SP
M=M-1
A=M
D=M
@WHILE_END0
D;JNE
// C_LABEL WHILE_EXP1
(WHILE_EXP1)
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-37
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-38
0;JMP
(SET_TRUE-37)
@SP
A=M-1
M=-1
(CONTINUE-38)
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// C_IF WHILE_END1
@SP
M=M-1
A=M
D=M
@WHILE_END1
D;JNE
// C_CALL Keyboard.keyPressed 0
@return-53
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(return-53)
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.move 1
@return-54
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.move
0;JMP
(return-54)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL PongGame.moveBall 1
@return-55
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.moveBall
0;JMP
(return-55)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Sys.wait 1
@return-56
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(return-56)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_GOTO WHILE_EXP1
@WHILE_EXP1
0;JMP
// C_LABEL WHILE_END1
(WHILE_END1)
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 130
@130
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-39
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-40
0;JMP
(SET_TRUE-39)
@SP
A=M-1
M=-1
(CONTINUE-40)
// C_IF IF_TRUE0
@SP
M=M-1
A=M
D=M
@IF_TRUE0
D;JNE
// C_GOTO IF_FALSE0
@IF_FALSE0
0;JMP
// C_LABEL IF_TRUE0
(IF_TRUE0)
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.setDirection 2
@return-57
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setDirection
0;JMP
(return-57)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_GOTO IF_END0
@IF_END0
0;JMP
// C_LABEL IF_FALSE0
(IF_FALSE0)
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 132
@132
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-41
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-42
0;JMP
(SET_TRUE-41)
@SP
A=M-1
M=-1
(CONTINUE-42)
// C_IF IF_TRUE1
@SP
M=M-1
A=M
D=M
@IF_TRUE1
D;JNE
// C_GOTO IF_FALSE1
@IF_FALSE1
0;JMP
// C_LABEL IF_TRUE1
(IF_TRUE1)
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.setDirection 2
@return-58
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setDirection
0;JMP
(return-58)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_GOTO IF_END1
@IF_END1
0;JMP
// C_LABEL IF_FALSE1
(IF_FALSE1)
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 140
@140
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-43
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-44
0;JMP
(SET_TRUE-43)
@SP
A=M-1
M=-1
(CONTINUE-44)
// C_IF IF_TRUE2
@SP
M=M-1
A=M
D=M
@IF_TRUE2
D;JNE
// C_GOTO IF_FALSE2
@IF_FALSE2
0;JMP
// C_LABEL IF_TRUE2
(IF_TRUE2)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP this 3
@THIS
D=M
@3
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_FALSE2
(IF_FALSE2)
// C_LABEL IF_END1
(IF_END1)
// C_LABEL IF_END0
(IF_END0)
// C_LABEL WHILE_EXP2
(WHILE_EXP2)
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-45
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-46
0;JMP
(SET_TRUE-45)
@SP
A=M-1
M=-1
(CONTINUE-46)
// not
@SP
A=M-1
M=!M
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// C_IF WHILE_END2
@SP
M=M-1
A=M
D=M
@WHILE_END2
D;JNE
// C_CALL Keyboard.keyPressed 0
@return-59
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(return-59)
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.move 1
@return-60
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.move
0;JMP
(return-60)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL PongGame.moveBall 1
@return-61
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.moveBall
0;JMP
(return-61)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Sys.wait 1
@return-62
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(return-62)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_GOTO WHILE_EXP2
@WHILE_EXP2
0;JMP
// C_LABEL WHILE_END2
(WHILE_END2)
// C_GOTO WHILE_EXP0
@WHILE_EXP0
0;JMP
// C_LABEL WHILE_END0
(WHILE_END0)
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_IF IF_TRUE3
@SP
M=M-1
A=M
D=M
@IF_TRUE3
D;JNE
// C_GOTO IF_FALSE3
@IF_FALSE3
0;JMP
// C_LABEL IF_TRUE3
(IF_TRUE3)
// C_PUSH constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Output.moveCursor 2
@return-63
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(return-63)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 9
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.new 1
@return-64
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(return-64)
// C_PUSH constant 71
@71
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-65
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-65)
// C_PUSH constant 97
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-66
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-66)
// C_PUSH constant 109
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-67
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-67)
// C_PUSH constant 101
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-68
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-68)
// C_PUSH constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-69
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-69)
// C_PUSH constant 79
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-70
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-70)
// C_PUSH constant 118
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-71
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-71)
// C_PUSH constant 101
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-72
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-72)
// C_PUSH constant 114
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL String.appendChar 2
@return-73
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(return-73)
// C_CALL Output.printString 1
@return-74
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(return-74)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_LABEL IF_FALSE3
(IF_FALSE3)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION PongGame.moveBall 5
(PongGame.moveBall)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.move 1
@return-75
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.move
0;JMP
(return-75)
// C_POP this 2
@THIS
D=M
@2
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-47
D;JGT
@SP
A=M-1
M=0
@CONTINUE-48
0;JMP
(SET_TRUE-47)
@SP
A=M-1
M=-1
(CONTINUE-48)
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 5
@THIS
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-49
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-50
0;JMP
(SET_TRUE-49)
@SP
A=M-1
M=-1
(CONTINUE-50)
// not
@SP
A=M-1
M=!M
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// C_IF IF_TRUE0
@SP
M=M-1
A=M
D=M
@IF_TRUE0
D;JNE
// C_GOTO IF_FALSE0
@IF_FALSE0
0;JMP
// C_LABEL IF_TRUE0
(IF_TRUE0)
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 5
@THIS
D=M
@5
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.getLeft 1
@return-76
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.getLeft
0;JMP
(return-76)
// C_POP local 1
@LCL
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.getRight 1
@return-77
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.getRight
0;JMP
(return-77)
// C_POP local 2
@LCL
D=M
@2
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.getLeft 1
@return-78
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.getLeft
0;JMP
(return-78)
// C_POP local 3
@LCL
D=M
@3
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.getRight 1
@return-79
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.getRight
0;JMP
(return-79)
// C_POP local 4
@LCL
D=M
@4
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-51
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-52
0;JMP
(SET_TRUE-51)
@SP
A=M-1
M=-1
(CONTINUE-52)
// C_IF IF_TRUE1
@SP
M=M-1
A=M
D=M
@IF_TRUE1
D;JNE
// C_GOTO IF_FALSE1
@IF_FALSE1
0;JMP
// C_LABEL IF_TRUE1
(IF_TRUE1)
// C_PUSH local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-53
D;JGT
@SP
A=M-1
M=0
@CONTINUE-54
0;JMP
(SET_TRUE-53)
@SP
A=M-1
M=-1
(CONTINUE-54)
// C_PUSH local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-55
D;JLT
@SP
A=M-1
M=0
@CONTINUE-56
0;JMP
(SET_TRUE-55)
@SP
A=M-1
M=-1
(CONTINUE-56)
// or
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D|M
// C_POP this 3
@THIS
D=M
@3
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_IF IF_TRUE2
@SP
M=M-1
A=M
D=M
@IF_TRUE2
D;JNE
// C_GOTO IF_FALSE2
@IF_FALSE2
0;JMP
// C_LABEL IF_TRUE2
(IF_TRUE2)
// C_PUSH local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-57
D;JLT
@SP
A=M-1
M=0
@CONTINUE-58
0;JMP
(SET_TRUE-57)
@SP
A=M-1
M=-1
(CONTINUE-58)
// C_IF IF_TRUE3
@SP
M=M-1
A=M
D=M
@IF_TRUE3
D;JNE
// C_GOTO IF_FALSE3
@IF_FALSE3
0;JMP
// C_LABEL IF_TRUE3
(IF_TRUE3)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_GOTO IF_END3
@IF_END3
0;JMP
// C_LABEL IF_FALSE3
(IF_FALSE3)
// C_PUSH local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// gt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-59
D;JGT
@SP
A=M-1
M=0
@CONTINUE-60
0;JMP
(SET_TRUE-59)
@SP
A=M-1
M=-1
(CONTINUE-60)
// C_IF IF_TRUE4
@SP
M=M-1
A=M
D=M
@IF_TRUE4
D;JNE
// C_GOTO IF_FALSE4
@IF_FALSE4
0;JMP
// C_LABEL IF_TRUE4
(IF_TRUE4)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_FALSE4
(IF_FALSE4)
// C_LABEL IF_END3
(IF_END3)
// C_PUSH this 6
@THIS
D=M
@6
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 6
@THIS
D=M
@6
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 6
@THIS
D=M
@6
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.setWidth 2
@return-80
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setWidth
0;JMP
(return-80)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH this 4
@THIS
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP this 4
@THIS
D=M
@4
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 22
@22
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Output.moveCursor 2
@return-81
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(return-81)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH this 4
@THIS
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Output.printInt 1
@return-82
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0;JMP
(return-82)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_LABEL IF_FALSE2
(IF_FALSE2)
// C_LABEL IF_FALSE1
(IF_FALSE1)
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Ball.bounce 2
@return-83
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.bounce
0;JMP
(return-83)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_LABEL IF_FALSE0
(IF_FALSE0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Main.main 1
(Main.main)
@SP
A=M
M=0
@SP
M=M+1
// C_CALL PongGame.newInstance 0
@return-84
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.newInstance
0;JMP
(return-84)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_CALL PongGame.getInstance 0
@return-85
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.getInstance
0;JMP
(return-85)
// C_POP local 0
@LCL
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL PongGame.run 1
@return-86
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.run
0;JMP
(return-86)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL PongGame.dispose 1
@return-87
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.dispose
0;JMP
(return-87)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Bat.new 0
(Bat.new)
// C_PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Memory.alloc 1
@return-88
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(return-88)
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1
@THIS
D=M
@1
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH argument 2
@ARG
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2
@THIS
D=M
@2
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH argument 3
@ARG
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 3
@THIS
D=M
@3
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 4
@THIS
D=M
@4
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.show 1
@return-89
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.show
0;JMP
(return-89)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Bat.dispose 0
(Bat.dispose)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Memory.deAlloc 1
@return-90
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(return-90)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Bat.show 0
(Bat.show)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_CALL Screen.setColor 1
@return-91
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(return-91)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.draw 1
@return-92
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.draw
0;JMP
(return-92)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Bat.hide 0
(Bat.hide)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Screen.setColor 1
@return-93
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(return-93)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.draw 1
@return-94
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.draw
0;JMP
(return-94)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Bat.draw 0
(Bat.draw)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_CALL Screen.drawRectangle 4
@return-95
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(return-95)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Bat.setDirection 0
(Bat.setDirection)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 4
@THIS
D=M
@4
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Bat.getLeft 0
(Bat.getLeft)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Bat.getRight 0
(Bat.getRight)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Bat.setWidth 0
(Bat.setWidth)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.hide 1
@return-96
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.hide
0;JMP
(return-96)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2
@THIS
D=M
@2
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Bat.show 1
@return-97
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.show
0;JMP
(return-97)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// C_FUNCTION Bat.move 0
(Bat.move)
// C_PUSH argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// C_PUSH this 4
@THIS
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-61
D;JEQ
@SP
A=M-1
M=0
@CONTINUE-62
0;JMP
(SET_TRUE-61)
@SP
A=M-1
M=-1
(CONTINUE-62)
// C_IF IF_TRUE0
@SP
M=M-1
A=M
D=M
@IF_TRUE0
D;JNE
// C_GOTO IF_FALSE0
@IF_FALSE0
0;JMP
// C_LABEL IF_TRUE0
(IF_TRUE0)
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-63
D;JLT
@SP
A=M-1
M=0
@CONTINUE-64
0;JMP
(SET_TRUE-63)
@SP
A=M-1
M=-1
(CONTINUE-64)
// C_IF IF_TRUE1
@SP
M=M-1
A=M
D=M
@IF_TRUE1
D;JNE
// C_GOTO IF_FALSE1
@IF_FALSE1
0;JMP
// C_LABEL IF_TRUE1
(IF_TRUE1)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_FALSE1
(IF_FALSE1)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Screen.setColor 1
@return-98
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(return-98)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_CALL Screen.drawRectangle 4
@return-99
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(return-99)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_CALL Screen.setColor 1
@return-100
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(return-100)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_CALL Screen.drawRectangle 4
@return-101
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(return-101)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_GOTO IF_END0
@IF_END0
0;JMP
// C_LABEL IF_FALSE0
(IF_FALSE0)
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_PUSH constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@SET_TRUE-65
D;JGT
@SP
A=M-1
M=0
@CONTINUE-66
0;JMP
(SET_TRUE-65)
@SP
A=M-1
M=-1
(CONTINUE-66)
// C_IF IF_TRUE2
@SP
M=M-1
A=M
D=M
@IF_TRUE2
D;JNE
// C_GOTO IF_FALSE2
@IF_FALSE2
0;JMP
// C_LABEL IF_TRUE2
(IF_TRUE2)
// C_PUSH constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_POP this 0
@THIS
D=M
@0
D=A+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// C_LABEL IF_FALSE2
(IF_FALSE2)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_CALL Screen.setColor 1
@return-102
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(return-102)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_CALL Screen.drawRectangle 4
@return-103
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(return-103)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_CALL Screen.setColor 1
@return-104
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(return-104)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M-1
M=M-D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0
@THIS
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2
@THIS
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_PUSH this 1
@THIS
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 3
@THIS
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M
A=A-1
D=M
@SP
M=M-1
@SP
A=M
A=A-1
M=M+D
// C_CALL Screen.drawRectangle 4
@return-105
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(return-105)
// C_POP temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
// C_LABEL IF_END0
(IF_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_RETURN
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
